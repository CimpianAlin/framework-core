/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file
 * distributed with this source distribution.
 *
 * This file is part of REDHAWK core.
 *
 * REDHAWK core is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * REDHAWK core is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 */
// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#ifndef CXX___XML_XSD_PRF_PIMPL_H
#define CXX___XML_XSD_PRF_PIMPL_H

#include<memory>
#include "prf-pskel.h"
namespace prf
{
    class Unit_pimpl: public virtual Unit_pskel,
      public ::xml_schema::string_pimpl
    {
      public:
      virtual void
      pre ();

      virtual std::string
      post_Unit ();
    };

    class AccessType_pimpl: public virtual AccessType_pskel,
      public ::xml_schema::string_pimpl
    {
      public:
      virtual void
      pre ();

      virtual ::std::string
      post_AccessType ();
    };

    class IsComplex_pimpl: public virtual IsComplex_pskel,
      public ::xml_schema::string_pimpl
    {
      public:
      virtual void
      pre ();

      virtual ::std::string
      post_IsComplex ();
    };

    class IsCommandLine_pimpl: public virtual IsCommandLine_pskel,
      public ::xml_schema::string_pimpl
    {
      public:
      virtual void
      pre ();

      virtual ::std::string
      post_IsCommandLine ();
    };
   
    class IsOptional_pimpl: public virtual IsOptional_pskel,
      public ::xml_schema::string_pimpl
    {
      public:
      virtual void
      pre ();

      virtual ::std::string
      post_IsOptional ();
    };

    class action_pimpl: public virtual action_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      type (const std::string&);

      virtual ::std::string
      post_action ();
      private:
      std::string _type;
    };

    class ActionType_pimpl: public virtual ActionType_pskel,
      public ::xml_schema::string_pimpl
    {
      public:
      virtual void
      pre ();

      virtual std::string
      post_ActionType ();
    };

    class configurationKind_pimpl: public virtual configurationKind_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      kindtype (const ::std::string&);

      virtual ::std::string
      post_configurationKind ();

      private:
      std::string _kindtype;
    };

    class enumeration_pimpl: public virtual enumeration_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      label (const ::std::string&);

      virtual void
      value (const ::std::string&);

      virtual ::std::map<std::string, std::string>::value_type
      post_enumeration ();
    };

    class enumerations_pimpl: public virtual enumerations_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      enumeration (const ::std::map<std::string, std::string>::value_type&);

      virtual ::std::map<std::string, std::string>
      post_enumerations ();
    };

    class inputValue_pimpl: public virtual inputValue_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      simple (const ossie::Property*);

      virtual void
      post_inputValue ();
    };

    class kind_pimpl: public virtual kind_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      kindtype (const ::std::string&);

      virtual ::std::string
      post_kind ();
      private:
      std::string _type;
    };

    class PropertyConfigurationType_pimpl: public virtual PropertyConfigurationType_pskel,
      public ::xml_schema::string_pimpl
    {
      public:
      virtual void
      pre ();

      virtual std::string
      post_PropertyConfigurationType ();
    };

    class StructPropertyConfigurationType_pimpl: public virtual StructPropertyConfigurationType_pskel,
      public PropertyConfigurationType_pimpl
    {
      public:
      virtual void
      pre ();

      virtual ::std::string
      post_StructPropertyConfigurationType ();
    };

    class properties_pimpl: public properties_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      description (const ::std::string&);

      virtual void
      simple (const ossie::SimpleProperty&);

      virtual void
      simplesequence (const ossie::SimpleSequenceProperty&);

      virtual void
      test ();

      virtual void
      struct_ (const ossie::StructProperty&);

      virtual void
      structsequence (const ossie::StructSequenceProperty&);

      virtual std::auto_ptr<ossie::PRF>
      post_properties ();

      public:
      std::auto_ptr<ossie::PRF> _prf;
    };

    class PropertyValueType_pimpl: public virtual PropertyValueType_pskel,
      public ::xml_schema::string_pimpl
    {
      public:
      virtual void
      pre ();

      virtual std::string
      post_PropertyValueType ();
    };

    class range_pimpl: public virtual range_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      max (const ::std::string&);

      virtual void
      min (const ::std::string&);

      virtual ::std::pair<std::string, std::string>
      post_range ();

      private:
      std::pair<std::string, std::string> range;

    };

    class resultValue_pimpl: public virtual resultValue_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      simple (const ossie::Property*);

      virtual void
      post_resultValue ();
    };

    class simple_pimpl: public virtual simple_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      description (const ::std::string&);

      virtual void
      value (const ::std::string&);

      virtual void
      units ();

      virtual void
      range (const ::std::vector<std::string>&);

      virtual void
      enumerations (const ::std::map<std::string, std::string>&);

      virtual void
      kind (const ::std::string&);

      virtual void
      action (const ::std::string&);

      virtual void
      id (const ::std::string&);

      virtual void
      mode (const ::std::string&);

      virtual void
      name (const ::std::string&);

      virtual void
      type (const ::std::string&);

      virtual void
      complex (const ::std::string&);

      virtual void
      commandline (const ::std::string&);

      virtual void
      optional (const ::std::string&);

      virtual const ossie::SimpleProperty&
      post_simple ();

      private:
      std::string _id;
      std::string _name;
      std::string _type;
      std::string _complex;
      std::string _mode;
      std::string _action;
      std::string _commandline;
      std::string _optional;
      std::vector<std::string> _kinds;
      std::auto_ptr<std::string> _value;
      ossie::SimpleProperty  _prop;
    };

    class simpleRef_pimpl: public virtual simpleRef_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      refid (const ::std::string&);

      virtual void
      value (const ::std::string&);

      virtual const ossie::SimplePropertyRef&
      post_simpleRef ();

      private:
      ossie::SimplePropertyRef simple;
    };

    class simpleSequenceRef_pimpl: public virtual simpleSequenceRef_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      values (const ::std::vector<std::string>&);

      virtual void
      refid (const ::std::string&);

      virtual const ossie::SimpleSequencePropertyRef&
      post_simpleSequenceRef ();
    
      private:
      ossie::SimpleSequencePropertyRef simplesequence;
    };

    class simpleSequence_pimpl: public virtual simpleSequence_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      description (const ::std::string&);

      virtual void
      values (const ::std::vector<std::string>&);

      virtual void
      units ();

      virtual void
      range (const ::std::vector<std::string>&);

      virtual void
      kind (const ::std::string&);

      virtual void
      action (const ::std::string&);

      virtual void
      id (const ::std::string&);

      virtual void
      mode (const ::std::string&);

      virtual void
      name (const ::std::string&);

      virtual void
      type (const ::std::string&);

      virtual void
      complex (const ::std::string&);

      virtual void
      optional (const ::std::string&);

      virtual const ossie::SimpleSequenceProperty&
      post_simpleSequence ();

      private:
      std::string _id;
      std::string _name;
      std::string _type;
      std::string _complex;
      std::string _mode;
      std::string _action;
      std::string _optional;
      std::vector<std::string> _kinds;
      std::vector<std::string> _values;
      ossie::SimpleSequenceProperty _prop;
    };

    class struct_pimpl: public virtual struct_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      description (const ::std::string&);

      virtual void
      simple (const ossie::SimpleProperty&);

      virtual void
      simplesequence (const ossie::SimpleSequenceProperty&);

      virtual void
      configurationkind (const ::std::string&);

      virtual void
      id (const ::std::string&);

      virtual void
      mode (const ::std::string&);

      virtual void
      name (const ::std::string&);

      virtual const ossie::StructProperty&
      post_struct ();

      private:
      std::string _id;
      std::string _name;
      std::string _type;
      std::string _mode;
      std::vector<std::string> _kinds;
      ossie::PropertyList      _value;
      ossie::StructProperty    _prop;
    };

    class structSequence_pimpl: public virtual structSequence_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      struct_ (const ossie::StructProperty&);

      virtual void
      description (const ::std::string&);

      virtual void
        structvalue (const ossie::ComponentPropertyMap&);

      virtual void
      configurationkind (const ::std::string&);

      virtual void
      id (const ::std::string&);

      virtual void
      mode (const ::std::string&);

      virtual void
      name (const ::std::string&);

      virtual const ossie::StructSequenceProperty&
      post_structSequence ();

      private:
      std::string _id;
      std::string _name;
      std::string _type;
      std::string _mode;
      std::vector<std::string> _kinds;
      ossie::StructProperty    _struct;
      std::vector<ossie::StructProperty> _values;
      ossie::StructSequenceProperty _prop;
    };

    class structValue_pimpl: public virtual structValue_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      simpleref (const ossie::SimplePropertyRef&);

      virtual void
      simplesequenceref (const ossie::SimpleSequencePropertyRef&);

      virtual const ossie::ComponentPropertyMap&
      post_structValue ();

      private:
      ossie::ComponentPropertyMap _values;
    };

    class test_pimpl: public virtual test_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      description (const ::std::string&);

      virtual void
      inputvalue ();

      virtual void
      resultvalue ();

      virtual void
      id (const ::std::string&);

      virtual void
      post_test ();
    };

    class values_pimpl: public virtual values_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      value (const ::std::string&);

      virtual ::std::vector<std::string>
      post_values ();
      private:
      std::vector<std::string> values;
    };
}
#endif // CXX___XML_XSD_PRF_PIMPL_H
